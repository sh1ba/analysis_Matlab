%------------------------------------------------
% ニュートン法のサンプルプログラム（残差判定）
%------------------------------------------------

%【準備】
%1. 初期値 x0(=x)，許容誤差 ep，最大反復回数N_maxを与える
%真の解の変数 x_exact も準備しておくとよい
%反復回数を保存する変数 iter も用意する
%グラフ作成の際は，plotする数値を代入する入れ物（（ゼロ）ベクトル）を用意しておく
%関数の定義（f, df）（無名関数を用いる）
x = -6.0; %初期値
ep=1.0e-10; %許容誤差
N_max =100; %最大反復回数
iter = 0;
f = @(x) x^3-4*x^2+13*x/4-3/4;
df = @(x) 3*x^2-8*x+13/4;
x_exact = 0.5;
x_errors = zeros(1,100);

%2. ニュートン反復スタート
% n=0,1,2,...,N_maxについて繰り返す
for n = 1 : N_max
    
    %2-1. 収束判定（残差判定）
    if abs(f(x)) < ep
        break;
    end
    
    %2-2. 近似解の更新（ニュートン法の反復式）
    x_new = x - f(x)/df(x);

    %反復回数のカウント
    iter = iter + 1;   
    
    %収束しなかった場合の処理（出力）
    if n==N_max
        fprintf('収束しませんでした')
    end

    x = x_new;
    x_errors(iter) = abs(x - x_exact);
end


%3. x を近似解として出力
%（レポート用）反復回数，近似解，真の解，絶対誤差，残差を出力
%fprintf文を用いて書く
fprintf('反復回数は %2d 回です\n',iter)
fprintf('近似解 x~ = %.16f です\n',x)
fprintf('真の値 x = %.16f です\n',x_exact)
fprintf('絶対誤差は %.16f です\n',x_errors(iter))
fprintf('残差は %.2e です\n',abs(f(x)))




%（レポート用）グラフを作成，出力
%グラフの作成はplotかsemilogy関数を用いる

semilogy(x_errors,'*')
xlim([0,iter+1]);
xlabel('反復回数');
ylabel('絶対誤差の対数');
grid on



